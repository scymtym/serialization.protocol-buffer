#+TITLE:       serialization.protocol-buffer README
#+AUTHOR:      Jan Moringen
#+EMAIL:       jmoringe@techfak.uni-bielefeld.de
#+DESCRIPTION: Description, tutorial and reference for the serialization.protocol-buffer system
#+KEYWORDS:    common lisp, native, protocol buffers, compiler
#+LANGUAGE:    en

* STARTED Introduction

  The =serialization.protocol-buffer= system is a pure Common Lisp
  implementation of a Protocol Buffer toolchain without any
  shortcuts. In particular, it does not depend on Google's protocol
  buffer compiler, =protoc=, or other external tools [fn:graphviz:
  GraphViz can be used for visualization.]. It consists of:

  + A parser for the "debug text" format
  + A parser for the "proto" format
  + A collection of functions for reading and writing the various
    "wire types" used in the protocol buffer format
  + (work in progress) A code generator that emits reasonably
    efficient (de)serializer functions for protocol buffer messages

  #+ATTR_HTML: :alt "build status image" :title Build Status :align right
  [[https://travis-ci.org/scymtym/serialization.protocol-buffer][https://travis-ci.org/scymtym/serialization.protocol-buffer.svg]]

* STARTED Tutorial

  This section briefly explains each of the modules mentioned in the
  [[*Introduction][introduction]].

** STARTED Parsing Notes

   All parsing functionality provided by this system is based on the
   [[https://github.com/scymtym/esrap][esrap]] system.

   Parse results are constructed using the
   [[https://github.com/scymtym/architecture.builder-protocol][architecture.builder-protocol]] system. For simplicity's sake, the
   examples in this tutorial use the src_lisp[:exports code]{list}
   builder provided by that system.

** STARTED Parsing the "Debug Text" Format

   The debug text format is mostly used for printing and reading
   protocol buffer message literals. There does not seem to be an
   official grammar or other formal specification but the format seems
   simple enough.

   Messages are written as sets of key-value pairs (with sometimes
   optional colons) and lists (for repeated fields) using the
   widespread square-bracket syntax:

   #+NAME: text-format-example
   #+BEGIN_EXAMPLE
     { foo: 1 bar: [ 2,3,4 ] baz: { whoop: "fez" } }
   #+END_EXAMPLE

   The debug text format can be parsed using the rules in the
   src_lisp[:exports code]{:serialization.protocol-buffer.parser.text-format}
   package. The
   src_lisp[:exports code]{serialization.protocol-buffer.parser.text-format:message}
   rule corresponds to a message literal:

   #+BEGIN_SRC lisp :results value code :exports code # both :var input=text-format-example
     (architecture.builder-protocol:with-builder ('list)
       (esrap:parse 'serialization.protocol-buffer.parser.text-format:message
                    (string-trim '(#\Newline) input)))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_SRC lisp
     (:MESSAGE
      (:FIELD
       (((:FIELD (:VALUE (((:LITERAL NIL :VALUE 1 :BOUNDS (7 . 8))))) :NAME FOO
                 :BOUNDS (2 . 8)))
        ((:FIELD
          (:VALUE
           (((:LITERAL NIL :VALUE 2 :BOUNDS (16 . 17)))
            ((:LITERAL NIL :VALUE 3 :BOUNDS (18 . 19)))
            ((:LITERAL NIL :VALUE 4 :BOUNDS (20 . 21)))))
          :NAME BAR :BOUNDS (9 . 23)))
        ((:FIELD
          (:VALUE
           (((:MESSAGE
              (:FIELD
               (((:FIELD (:VALUE (((:LITERAL NIL :VALUE FEZ :BOUNDS (38 . 43)))))
                         :NAME WHOOP :BOUNDS (31 . 43)))))
              :BOUNDS (29 . 45)))))
          :NAME BAZ :BOUNDS (24 . 45)))))
      :BOUNDS (0 . 47))
   #+END_SRC

   That's basically it for the debug text format.

** TODO Parsing the "Proto" Format

** TODO Generating Code

* TODO Dictionary

* settings                                                         :noexport:

#+OPTIONS: H:2 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+SEQ_TODO: TODO STARTED | DONE
